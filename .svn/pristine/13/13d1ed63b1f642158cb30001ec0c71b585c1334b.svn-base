<template>
  <div style="overflow-x:hidden">
    <!--<mt-header fixed title="选择日期出行方案">-->
      <!--<router-link to="/details" slot="left">-->
        <!--<mt-button icon="back"></mt-button>-->
      <!--</router-link>-->
      <!--<mt-button icon="more" slot="right"></mt-button>-->
    <!--</mt-header>-->

    <header   class="mint-header is-fixed">
      <div class="mint-header-button is-left">
        <div    class="">
          <button class="mint-button mint-button--default mint-button--normal" @click="goBack">
            <span class="mint-button-icon"><i class="mintui mintui-back"></i></span>
            <label class="mint-button-text"></label>
          </button>
        </div>
      </div>
      <h1 class="mint-header-title">选择日期出行方案</h1>
      <div class="mint-header-button is-right">
        <!--<a data-v-c1010688="" href="#/my-orders" class=""><i data-v-c1010688="" class="iconfont icon-dingdan"></i></a>-->
      </div>
    </header>

    <div class="content">
      <div class="content-cell mt-0 pt-0">
        <div class="cell-title">出行方案</div>
        <div>
          <button type="button" class="btn btn-sm mr-1" :class="selectedSkuId===skuList[index].skuId?'btn-yellow':''"
                  v-for="(item, index) in skuList"
                  @click="selectSkuName(index)">{{item.skuName}}
          </button>
        </div>
      </div>
      <div class="content-cell pt-0">
        <div class="cell-title">出行日期</div>
        <div class="d-none">
          <button type="button" class="btn btn-light btn-sm">1月</button>
          <button type="button" class="btn btn-yellow btn-sm">2月</button>
          <button type="button" class="btn btn-light btn-sm">3月</button>
          <button type="button" class="btn btn-light btn-sm">4月</button>
          <button type="button" class="btn btn-light btn-sm">5月</button>
        </div>
        <!--<Calendar4Order :selected-sku="selectedSku.dateKeyinfo"></Calendar4Order>-->
        <Calendar4Order :selected-sku="selectedSku" class="myCalendar" v-on:selectedDay="selectedDay"></Calendar4Order>
      </div>
      <div class="content-cell pt-0">
        <div class="cell-title">出行人数</div>
        <div class="row people-num">
          <div class="col-7">
            成人(12岁以上)
            <div v-if="selectedDayDate&&selectedSku.dateKeyInfo[selectedDayDate]" class="font-12">
              <span>余:{{selectedSku.dateKeyInfo[selectedDayDate].adultNumber-adultCount}}</span>
              <span>￥{{selectedSku.dateKeyInfo[selectedDayDate].adultSellPrice}}/人</span>
            </div>
          </div>
          <div class="col-5">
            <input-num @change="changeAdultCount" :min="1" :value="adultCount"></input-num>
          </div>
        </div>
        <div class="row people-num">
          <div class="col-7">
            儿童(2-12岁)
            <div v-if="selectedDayDate&&selectedSku.dateKeyInfo[selectedDayDate]" class="font-12">
              <span>余:{{selectedSku.dateKeyInfo[selectedDayDate].childNumber-childCount}}</span>
              <span>￥{{ selectedSku.dateKeyInfo[selectedDayDate].childSellPrice}}/人</span>
            </div>
          </div>

          <div class="col-5">
            <input-num @change="changeChildCount" :value="childCount"></input-num>
          </div>
        </div>
        <div class="disableLayer" :class="selectedDayDate?'d-none':''"></div>
      </div>
      <div class="black-bottom"></div>
    </div>
    <div class="fixed-bottom">
      <div class="bg-white total ask">合计:{{total()}}</div>
      <div class="next-step" :to="{name:'OrderConfirmation'}" @click="goOrderConfirm">下一步</div>
    </div>
  </div>


</template>

<script>
  //  import { Navbar, TabItem } from 'mint-ui';
  import avatar from '@/assets/timg.jpg'

  //  Vue.component(Navbar.name, Navbar);
  import {getProductDateById} from '@/api/getData';
  import Calendar4Order from '@/components/calendar-order'
  import InputNum from '@/components/input-num'

  import Vue from 'vue'


  Vue.component(InputNum.name, InputNum);
  Vue.component(Calendar4Order.name, Calendar4Order);


  export default {
    name: 'ChooseDate',
    data() {
      return {
        selectedSkuId: '',
        selectedGroupId:'',
        selectedSkuName: '',
        selectedSku: {dateKeyInfo: {}},
        selectedDayDate: false,
        adultCount: 1,
        childCount: 0,
        // curAdultPrice: 0,//选中日期的成人价格
        // curChildPrice: 0,//选中日期的儿童价格
        skuList: [{
          "skuName": "还是一个很好的产品",
          dateKeyinfo: {},
          "calendarInfo": [{
            "childNumber": 5,
            "adultSellPrice": 200.00,
            "groupId": "356888adfd8040698a95a7f20f152c62",
            "groupTime": "2018-04-01 12:00:00",
            "childSellPrice": 100.00,
            "adultNumber": 10
          }, {
            "childNumber": 10,
            "adultSellPrice": 180.00,
            "groupId": "b9b7ef98465d44408e9d83ccadcfab46",
            "groupTime": "2018-04-02 09:00:00",
            "childSellPrice": 90.00,
            "adultNumber": 20
          }],
          "skuId": "cf0c6a6192bc4008b71f972fc510b653"
        }, {
          "skuName": "第二个套餐",
          dateKeyinfo: {},
          "calendarInfo": [{
            "childNumber": 2,
            "adultSellPrice": 12.00,
            "groupId": "kkkkkkktb30j3t6vjtus1f8a4b7b015987",
            "groupTime": "2018-03-21 16:23:30",
            "childSellPrice": 12.00,
            "adultNumber": 2
          }],
          "skuId": "gfb4tb3tb30j3t6vjtus1f8a4b7b015987"
        }]

      }
    },
    methods: {
      total() {
        if (this.selectedSku.dateKeyInfo[this.selectedDayDate]) {
          let skuInfo = this.selectedSku.dateKeyInfo[this.selectedDayDate];
          return this.adultCount * skuInfo.adultSellPrice + this.childCount * skuInfo.childSellPrice;
        } else {
          return 0
        }
      },
      changeAdultCount(value) {
        this.adultCount = value;
      },
      changeChildCount(value) {
        this.childCount = value;
      },
      selectSkuName(index) {
        this.selectedSku = this.skuList[index];
        this.selectedSkuId = this.skuList[index].skuId;
        this.selectedSkuName = this.skuList[index].skuName;
      },
      selectedDay(day,groupId) {
        this.selectedDayDate = day;
        this.selectedGroupId = groupId;
      },
      goOrderConfirm() {
        debugger;
        this.$router.push({name: 'OrderConfirmation', query: {
            stockGoodsId: this.selectedGroupId,
            stockGoodsName: this.selectedSkuName,
            adult: this.adultCount,
            child: this.childCount,
            orderMoney: this.total(),
            day:this.selectedDayDate
          }})
        // this.$router.push({
        //   name: 'OrderConfirmation', params: {
        //     stockGoodsId: this.selectedGroupId,
        //     stockGoodsName: this.selectedSkuName,
        //     adult: this.adultCount,
        //     child: this.childCount,
        //     orderMoney: this.total(),
        //     day:this.selectedDayDate
        //   }
        // });
      },
      getData() {
        getProductDateById(this.$route.params.id).then(res => {
          if (res && res.data.state === 1 && res.data.data && res.data.data.length > 0) {
            let list = res.data.data;
            list.map(item => {
              let dateKeyInfo = {};
              item.calendarInfo.map(cellItem => {
                dateKeyInfo[cellItem.groupTime.split(' ')[0]] = cellItem;
              })
              item.dateKeyInfo = dateKeyInfo;
            })

            this.skuList = list;
            this.selectedSku = this.skuList[0];
            this.selectedSkuId = this.skuList[0].skuId;
            this.selectedSkuName = this.skuList[0].skuName;

          }
        })
      }
    },
    // mounted(){
    //   console.log(this.selectedSku.toLocaleString())
    //   debugger;
    // },
    created() {
      if (this.$route.params.id) {
        this.productId = this.$route.params.id;
        var thisData = this;
        this.getData();
        // getProductDateById(this.$route.params.id).then(res => {
        //   if (res && res.data.state === 1 && res.data.data && res.data.data.length > 0) {
        //     let list = res.data.data;
        //     list.map(item=>{
        //       let dateKeyInfo = {};
        //       item.calendarInfo.map(cellitem=>{
        //         dateKeyInfo[cellitem.groupTime] = cellitem;
        //       })
        //       item.dateKeyInfo = dateKeyInfo;
        //     })
        //
        //     thisData.skuList = list;
        //     thisData.selectedSku = thisData.skuList[0];
        //     thisData.selectedSkuId = thisData.skuList[0].skuId;
        //   }
        // })
      }

    }
  }
</script>


<style lang="less" type="text/less" rel="stylesheet/less" scoped>
  @import "../style/main.less";



  .cell-title {
    border-bottom: 0 !important;
  }

  .black-bottom {
    .px2rem(height, 60);
  }

  .people-num {
    .px2rem(height, 50);
    width:100%;
  }

  /*.content {*/
  /*position: absolute;*/
  /*top: 2.5rem;*/
  /*bottom: 0;*/
  /*width: 100%;*/
  /*left: 0rem;*/
  /*overflow: auto;*/
  /*background-color: #eee;*/

  /*.content-cell {*/
  /*background-color: #fff;*/
  /*min-height: 2rem;*/
  /*margin-top: 0.5rem;*/
  /*padding: 0.5rem;*/

  /*.row + .row {*/
  /*margin-top: 0.5rem;*/
  /*}*/

  /*}*/

  /*}*/
  .myCalendar {
    overflow: hidden;
  }

  .disableLayer {
    background: rgba(255, 255, 255, 0.5);
    position: relative;
    z-index: 100;
    .px2rem(height, 120);
    .px2rem(margin-top, -120)
  }

  .fixed-bottom {
    display: flex;
    text-align: center;
    .total {
      width: 50%;
      /*flex: 0 0 20%;*/
      display: inline-block;
      .px2rem(height, 60);
      .px2rem(line-height, 60);
      border-top: 1px solid #e5e5e5;
      .px2rem(border-top-width, 0.5);
    }
    .next-step {
      width: 50%;
      display: inline-block;
      background: @orange;
      color: white;
      .px2rem(height, 60);
      .px2rem(line-height, 60);
    }
  }
</style>
